#pragma once
#include"Tape.h"
using namespace std;

const string filename = "tapes.dat";

void truncateTapeFile() {
	ofstream file;
	file.open("tapes.dat", ios::binary | ios::trunc);
	file.close();
}

//SHOW ALL AVAILABLE TAPES
void showAllTape() {
	Tape* tapes; 
	int tapesSize; 
	int tapeIdSize = 0;
	int longestTitle = 0;
	int amountSize = 0;
	int hBorderSize = 0;
	string hBorder;
	string separator = " | ";
	string tapeID = separator + "Tape ID";
	string title = separator + "Title";
	string amount = separator + "Ammount |";

	tie(tapes, tapesSize) = readFile<Tape>(tapesFilename);

	// Get sizes to construct table
	tapeIdSize = tapeID.size() - separator.size();
	for (int i = 0; i < tapesSize; i++) {
		string tmp(tapes[i].title);
		longestTitle = tmp.size() > longestTitle ? tmp.size() : longestTitle;
	}
	amountSize = amount.size();
	
	hBorderSize = tapeIdSize + longestTitle + amountSize + separator.size();
	hBorder.append(hBorderSize, '_');

	// Build table
	cout << "  " << hBorder << endl;
	cout << setw(tapeIdSize) << left << tapeID
		 << setw(longestTitle + separator.size()) << title  << left
		 << setw(amountSize) << left << amount  << endl;
	cout << "  " << hBorder << endl;
	// Show stock
	for (int i = 0; i < tapesSize; i++) {
		cout << separator << setw(tapeIdSize) << left << tapes[i].ID
			 << separator << setw(longestTitle) << left << tapes[i].title
			 << separator << setw(amountSize - separator.size() -1) << left << tapes[i].ammount << "|" << endl;
	}
	cout << "  " << hBorder << endl << endl;

	system("pause");
};

//ADD NEW TAPE WITH AUTOGENERATED ID
void addNewTape() {
	int newID = -1;
	int tapesSize;
	auto newTape = new Tape[1];	
	Tape* tapes;
	bool sortById = false;
	
	// Auto generate ID	
	tie(tapes, tapesSize) = readFile<Tape>(tapesFilename);
	if (tapesSize == 0) { newID = 1; }
	else if (tapesSize == 1) { newID = tapes[0].ID + 1; }

	// Fill ID "holes" if any
	for (int i = 0; i < tapesSize - 1; i++) {		
		if (tapes[i].ID + 1 != tapes[i + 1].ID) { newID = tapes[i].ID + 1; sortById = true; }
	}
	// If no "holes" make new ID
	if (newID == -1) { newID = tapes[tapesSize - 1].ID + 1; }	

	// Get input
	string tmpName;
	newTape->ID = newID;
	cout << "Enter the title of the tape: ";		
	getline(cin >> ws, tmpName);
	strcpy(newTape->title, tmpName.c_str());
	cout << "Enter ammount: "; cin >> newTape->ammount;
	
	// Save to file
	if (!sortById) {

		writeToFile<Tape>(newTape, tapesFilename);		
		system("cls");
		cout << "New title: \"" << newTape->title << "\" added to the database." << endl;
	}
	else {
		truncateTapeFile();
		for (int i = 0; i < tapesSize; i++) {
			for (int j = 0; j < tapesSize; j++) {
				if (tapes[j].ID - 1 == i) {

					writeToFile<Tape>(newTape, tapesFilename);					
				}
				else if (newTape->ID - 1 == i) {
					writeToFile<Tape>(newTape, tapesFilename);					
				}
			}
		}
	}

	delete[]newTape;	
	system("pause");
};

//DELETE ANY TAPE
void deleteTape() {
	int ID;
	int choice = 0;
	int tapesSize;
	Tape *tapes;
	bool deleteTape = false;

	tie(tapes, tapesSize) = readFile<Tape>(tapesFilename);
	showAllTape();
		
	cout << "Enter ID of the tape you want to delete: "; cin >> ID;

	for (int i = 0; i < tapesSize; i++) {
		if (tapes[i].ID == ID) {
			cout << "Tape ID: " << tapes[i].ID << " * Title: " << tapes[i].title << endl;
			cout << "Delete this tape?\n1. Yes\n2. No\nOption: "; cin >> choice;
			deleteTape = choice == 1 ? true : false;
		}
	}

	if (deleteTape) {
		truncateTapeFile();
		for (int i = 0; i < tapesSize; i++) {
			if (tapes[i].ID != ID) {
				writeToFile<Tape>(&tapes[i], tapesFilename);
			}
		}	
	}

	cout << "Deleted";
	showAllTape();
};