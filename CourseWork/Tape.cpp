#pragma once
#include"Tape.h"
using namespace std;


//SHOW ALL AVAILABLE TAPES
void showAllTape() {
	Tape* tapes; 
	int tapesSize;
	tie(tapes, tapesSize) = readFile(new Tape);
	show(tapes, tapesSize);
	system("pause");
};

//ADD NEW TAPE WITH AUTOGENERATED ID
void addNewTape() {
	int newID = -1;
	int tapesSize;
	Tape *newTape = new Tape[1];	
	Tape *tapes;
	bool sortById;
	
	tie(tapes, tapesSize) = readFile(new Tape);

	// Auto generate ID	
	tie(newID, sortById) = generateID(tapesSize, tapes);

	// Get input
	string tmpName;
	newTape->Id = newID;
	cout << "Enter the title of the tape: ";		
	getline(cin >> ws, tmpName);
	strcpy(newTape->title, tmpName.c_str());
	cout << "Enter ammount: "; cin >> newTape->ammount;
	
	// Save to file
	if (!sortById) {
		writeToFile(newTape);
	}
	else {
		sortWriteToFile(tapesSize, tapes, newTape);
	}
	system("cls");
	cout << "New title: \"" << newTape->title << "\" added to the database." << endl;
	delete[]newTape;	
	system("pause");
};

//DELETE ANY TAPE
void deleteTape() {
	int ID;
	int choice = 0;
	int tapesSize;
	Tape *tapes;
	bool deleteTape = false;

	tie(tapes, tapesSize) = readFile(new Tape);
	showAllTape();
		
	cout << "Enter ID of the tape you want to delete: "; cin >> ID;

	for (int i = 0; i < tapesSize; i++) {
		if (tapes[i].Id == ID) {
			cout << "Tape ID: " << tapes[i].Id << " * Title: " << tapes[i].title << endl;
			cout << "Delete this tape?\n1. Yes\n2. No\nOption: "; cin >> choice;
			deleteTape = choice == 1 ? true : false;
		}
	}

	if (deleteTape) {
		truncateFile(tapesFilename);
		for (int i = 0; i < tapesSize; i++) {
			if (tapes[i].Id != ID) {
				writeToFile(&tapes[i]);
			}
		}	
	}

	cout << "Deleted";
	showAllTape();
};

tuple<int, string> getTapeById(int searchId) {
	Tape* tapes;
	int tapesSize;
	tie(tapes, tapesSize) = readFile(new Tape);

	for (int i = 0; i < tapesSize; i++) {
		if (tapes[i].Id == searchId) {
			return make_tuple(tapes[i].Id, tapes[i].title);
		}
	}
	return make_tuple(0, "");
}

void decreaseAmount(int dId) {
	Tape* tapes;
	int tapesSize;
	tie(tapes, tapesSize) = readFile(new Tape);

	for (int i = 0; i < tapesSize; i++) {
		if (tapes[i].Id == dId) {
			tapes[i].ammount = tapes[i].ammount > 0 ? tapes[i].ammount - 1 : tapes[i].ammount;
		}
	}

	changeDataInFile(tapes, tapesSize);
}
void increaseAmount(int dId) {
	Tape* tapes;
	int tapesSize;
	tie(tapes, tapesSize) = readFile(new Tape);

	for (int i = 0; i < tapesSize; i++) {
		if (tapes[i].Id == dId) {
			tapes[i].ammount = tapes[i].ammount + 1;
		}
	}

	changeDataInFile(tapes, tapesSize);
}